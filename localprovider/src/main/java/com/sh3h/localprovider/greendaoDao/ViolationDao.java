package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Violation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZ_VIOLATION".
*/
public class ViolationDao extends AbstractDao<Violation, Long> {

    public static final String TABLENAME = "BZ_VIOLATION";

    /**
     * Properties of entity Violation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property VIOLATION_ID = new Property(0, Long.class, "VIOLATION_ID", true, "VIOLATION_ID");
        public final static Property VIOLATION_NUMBER = new Property(1, Long.class, "VIOLATION_NUMBER", false, "VIOLATION_NUMBER");
        public final static Property VIOLATION_TYPE = new Property(2, String.class, "VIOLATION_TYPE", false, "VIOLATION_TYPE");
        public final static Property VIOLATION_CONTENT = new Property(3, String.class, "VIOLATION_CONTENT", false, "VIOLATION_CONTENT");
        public final static Property REMARK = new Property(4, String.class, "REMARK", false, "REMARK");
    }


    public ViolationDao(DaoConfig config) {
        super(config);
    }
    
    public ViolationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BZ_VIOLATION\" (" + //
                "\"VIOLATION_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: VIOLATION_ID
                "\"VIOLATION_NUMBER\" INTEGER," + // 1: VIOLATION_NUMBER
                "\"VIOLATION_TYPE\" TEXT," + // 2: VIOLATION_TYPE
                "\"VIOLATION_CONTENT\" TEXT," + // 3: VIOLATION_CONTENT
                "\"REMARK\" TEXT);"); // 4: REMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BZ_VIOLATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Violation entity) {
        stmt.clearBindings();
 
        Long VIOLATION_ID = entity.getVIOLATION_ID();
        if (VIOLATION_ID != null) {
            stmt.bindLong(1, VIOLATION_ID);
        }
 
        Long VIOLATION_NUMBER = entity.getVIOLATION_NUMBER();
        if (VIOLATION_NUMBER != null) {
            stmt.bindLong(2, VIOLATION_NUMBER);
        }
 
        String VIOLATION_TYPE = entity.getVIOLATION_TYPE();
        if (VIOLATION_TYPE != null) {
            stmt.bindString(3, VIOLATION_TYPE);
        }
 
        String VIOLATION_CONTENT = entity.getVIOLATION_CONTENT();
        if (VIOLATION_CONTENT != null) {
            stmt.bindString(4, VIOLATION_CONTENT);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(5, REMARK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Violation entity) {
        stmt.clearBindings();
 
        Long VIOLATION_ID = entity.getVIOLATION_ID();
        if (VIOLATION_ID != null) {
            stmt.bindLong(1, VIOLATION_ID);
        }
 
        Long VIOLATION_NUMBER = entity.getVIOLATION_NUMBER();
        if (VIOLATION_NUMBER != null) {
            stmt.bindLong(2, VIOLATION_NUMBER);
        }
 
        String VIOLATION_TYPE = entity.getVIOLATION_TYPE();
        if (VIOLATION_TYPE != null) {
            stmt.bindString(3, VIOLATION_TYPE);
        }
 
        String VIOLATION_CONTENT = entity.getVIOLATION_CONTENT();
        if (VIOLATION_CONTENT != null) {
            stmt.bindString(4, VIOLATION_CONTENT);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(5, REMARK);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Violation readEntity(Cursor cursor, int offset) {
        Violation entity = new Violation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // VIOLATION_ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // VIOLATION_NUMBER
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // VIOLATION_TYPE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // VIOLATION_CONTENT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // REMARK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Violation entity, int offset) {
        entity.setVIOLATION_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVIOLATION_NUMBER(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setVIOLATION_TYPE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVIOLATION_CONTENT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setREMARK(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Violation entity, long rowId) {
        entity.setVIOLATION_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Violation entity) {
        if(entity != null) {
            return entity.getVIOLATION_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Violation entity) {
        return entity.getVIOLATION_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
