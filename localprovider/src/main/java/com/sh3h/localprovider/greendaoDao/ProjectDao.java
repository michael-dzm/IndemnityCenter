package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Project;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZ_PROJECT".
*/
public class ProjectDao extends AbstractDao<Project, Long> {

    public static final String TABLENAME = "BZ_PROJECT";

    /**
     * Properties of entity Project.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PROJECT_ID = new Property(0, Long.class, "PROJECT_ID", true, "PROJECT_ID");
        public final static Property PROJECT_NUMBER = new Property(1, String.class, "PROJECT_NUMBER", false, "PROJECT_NUMBER");
        public final static Property PROJECT_NAME = new Property(2, String.class, "PROJECT_NAME", false, "PROJECT_NAME");
        public final static Property CONSTRUCTION_UNIT = new Property(3, String.class, "CONSTRUCTION_UNIT", false, "CONSTRUCTION_UNIT");
        public final static Property CONSTRUCTION_TEAM = new Property(4, String.class, "CONSTRUCTION_TEAM", false, "CONSTRUCTION_TEAM");
        public final static Property OFFICE = new Property(5, String.class, "OFFICE", false, "OFFICE");
        public final static Property ADDRESS = new Property(6, String.class, "ADDRESS", false, "ADDRESS");
        public final static Property START_TIME = new Property(7, long.class, "START_TIME", false, "START_TIME");
        public final static Property END_TIME = new Property(8, long.class, "END_TIME", false, "END_TIME");
        public final static Property STATE = new Property(9, int.class, "STATE", false, "STATE");
        public final static Property REMARK = new Property(10, String.class, "REMARK", false, "REMARK");
    }


    public ProjectDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BZ_PROJECT\" (" + //
                "\"PROJECT_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: PROJECT_ID
                "\"PROJECT_NUMBER\" TEXT," + // 1: PROJECT_NUMBER
                "\"PROJECT_NAME\" TEXT," + // 2: PROJECT_NAME
                "\"CONSTRUCTION_UNIT\" TEXT," + // 3: CONSTRUCTION_UNIT
                "\"CONSTRUCTION_TEAM\" TEXT," + // 4: CONSTRUCTION_TEAM
                "\"OFFICE\" TEXT," + // 5: OFFICE
                "\"ADDRESS\" TEXT," + // 6: ADDRESS
                "\"START_TIME\" INTEGER NOT NULL ," + // 7: START_TIME
                "\"END_TIME\" INTEGER NOT NULL ," + // 8: END_TIME
                "\"STATE\" INTEGER NOT NULL ," + // 9: STATE
                "\"REMARK\" TEXT);"); // 10: REMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BZ_PROJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long PROJECT_ID = entity.getPROJECT_ID();
        if (PROJECT_ID != null) {
            stmt.bindLong(1, PROJECT_ID);
        }
 
        String PROJECT_NUMBER = entity.getPROJECT_NUMBER();
        if (PROJECT_NUMBER != null) {
            stmt.bindString(2, PROJECT_NUMBER);
        }
 
        String PROJECT_NAME = entity.getPROJECT_NAME();
        if (PROJECT_NAME != null) {
            stmt.bindString(3, PROJECT_NAME);
        }
 
        String CONSTRUCTION_UNIT = entity.getCONSTRUCTION_UNIT();
        if (CONSTRUCTION_UNIT != null) {
            stmt.bindString(4, CONSTRUCTION_UNIT);
        }
 
        String CONSTRUCTION_TEAM = entity.getCONSTRUCTION_TEAM();
        if (CONSTRUCTION_TEAM != null) {
            stmt.bindString(5, CONSTRUCTION_TEAM);
        }
 
        String OFFICE = entity.getOFFICE();
        if (OFFICE != null) {
            stmt.bindString(6, OFFICE);
        }
 
        String ADDRESS = entity.getADDRESS();
        if (ADDRESS != null) {
            stmt.bindString(7, ADDRESS);
        }
        stmt.bindLong(8, entity.getSTART_TIME());
        stmt.bindLong(9, entity.getEND_TIME());
        stmt.bindLong(10, entity.getSTATE());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(11, REMARK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long PROJECT_ID = entity.getPROJECT_ID();
        if (PROJECT_ID != null) {
            stmt.bindLong(1, PROJECT_ID);
        }
 
        String PROJECT_NUMBER = entity.getPROJECT_NUMBER();
        if (PROJECT_NUMBER != null) {
            stmt.bindString(2, PROJECT_NUMBER);
        }
 
        String PROJECT_NAME = entity.getPROJECT_NAME();
        if (PROJECT_NAME != null) {
            stmt.bindString(3, PROJECT_NAME);
        }
 
        String CONSTRUCTION_UNIT = entity.getCONSTRUCTION_UNIT();
        if (CONSTRUCTION_UNIT != null) {
            stmt.bindString(4, CONSTRUCTION_UNIT);
        }
 
        String CONSTRUCTION_TEAM = entity.getCONSTRUCTION_TEAM();
        if (CONSTRUCTION_TEAM != null) {
            stmt.bindString(5, CONSTRUCTION_TEAM);
        }
 
        String OFFICE = entity.getOFFICE();
        if (OFFICE != null) {
            stmt.bindString(6, OFFICE);
        }
 
        String ADDRESS = entity.getADDRESS();
        if (ADDRESS != null) {
            stmt.bindString(7, ADDRESS);
        }
        stmt.bindLong(8, entity.getSTART_TIME());
        stmt.bindLong(9, entity.getEND_TIME());
        stmt.bindLong(10, entity.getSTATE());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(11, REMARK);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Project readEntity(Cursor cursor, int offset) {
        Project entity = new Project( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // PROJECT_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PROJECT_NUMBER
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PROJECT_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CONSTRUCTION_UNIT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CONSTRUCTION_TEAM
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // OFFICE
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ADDRESS
            cursor.getLong(offset + 7), // START_TIME
            cursor.getLong(offset + 8), // END_TIME
            cursor.getInt(offset + 9), // STATE
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // REMARK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Project entity, int offset) {
        entity.setPROJECT_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPROJECT_NUMBER(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPROJECT_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCONSTRUCTION_UNIT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCONSTRUCTION_TEAM(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOFFICE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setADDRESS(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSTART_TIME(cursor.getLong(offset + 7));
        entity.setEND_TIME(cursor.getLong(offset + 8));
        entity.setSTATE(cursor.getInt(offset + 9));
        entity.setREMARK(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Project entity, long rowId) {
        entity.setPROJECT_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Project entity) {
        if(entity != null) {
            return entity.getPROJECT_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Project entity) {
        return entity.getPROJECT_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
