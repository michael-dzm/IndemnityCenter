package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Address;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZ_ADDRESS".
*/
public class AddressDao extends AbstractDao<Address, Long> {

    public static final String TABLENAME = "BZ_ADDRESS";

    /**
     * Properties of entity Address.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ADDRESS_ID = new Property(0, Long.class, "ADDRESS_ID", true, "ADDRESS_ID");
        public final static Property SERVER_ID = new Property(1, Long.class, "SERVER_ID", false, "SERVER_ID");
        public final static Property USER_ID = new Property(2, Long.class, "USER_ID", false, "USER_ID");
        public final static Property ADDRESS_CONTENT = new Property(3, String.class, "ADDRESS_CONTENT", false, "ADDRESS_CONTENT");
        public final static Property DEFAULT = new Property(4, int.class, "DEFAULT", false, "DEFAULT");
        public final static Property OPERATE_TIME = new Property(5, long.class, "OPERATE_TIME", false, "OPERATE_TIME");
        public final static Property UPLOAD = new Property(6, int.class, "UPLOAD", false, "UPLOAD");
    }


    public AddressDao(DaoConfig config) {
        super(config);
    }
    
    public AddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BZ_ADDRESS\" (" + //
                "\"ADDRESS_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ADDRESS_ID
                "\"SERVER_ID\" INTEGER," + // 1: SERVER_ID
                "\"USER_ID\" INTEGER," + // 2: USER_ID
                "\"ADDRESS_CONTENT\" TEXT," + // 3: ADDRESS_CONTENT
                "\"DEFAULT\" INTEGER NOT NULL ," + // 4: DEFAULT
                "\"OPERATE_TIME\" INTEGER NOT NULL ," + // 5: OPERATE_TIME
                "\"UPLOAD\" INTEGER NOT NULL );"); // 6: UPLOAD
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BZ_ADDRESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Address entity) {
        stmt.clearBindings();
 
        Long ADDRESS_ID = entity.getADDRESS_ID();
        if (ADDRESS_ID != null) {
            stmt.bindLong(1, ADDRESS_ID);
        }
 
        Long SERVER_ID = entity.getSERVER_ID();
        if (SERVER_ID != null) {
            stmt.bindLong(2, SERVER_ID);
        }
 
        Long USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindLong(3, USER_ID);
        }
 
        String ADDRESS_CONTENT = entity.getADDRESS_CONTENT();
        if (ADDRESS_CONTENT != null) {
            stmt.bindString(4, ADDRESS_CONTENT);
        }
        stmt.bindLong(5, entity.getDEFAULT());
        stmt.bindLong(6, entity.getOPERATE_TIME());
        stmt.bindLong(7, entity.getUPLOAD());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Address entity) {
        stmt.clearBindings();
 
        Long ADDRESS_ID = entity.getADDRESS_ID();
        if (ADDRESS_ID != null) {
            stmt.bindLong(1, ADDRESS_ID);
        }
 
        Long SERVER_ID = entity.getSERVER_ID();
        if (SERVER_ID != null) {
            stmt.bindLong(2, SERVER_ID);
        }
 
        Long USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindLong(3, USER_ID);
        }
 
        String ADDRESS_CONTENT = entity.getADDRESS_CONTENT();
        if (ADDRESS_CONTENT != null) {
            stmt.bindString(4, ADDRESS_CONTENT);
        }
        stmt.bindLong(5, entity.getDEFAULT());
        stmt.bindLong(6, entity.getOPERATE_TIME());
        stmt.bindLong(7, entity.getUPLOAD());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Address readEntity(Cursor cursor, int offset) {
        Address entity = new Address( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ADDRESS_ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // SERVER_ID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // USER_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ADDRESS_CONTENT
            cursor.getInt(offset + 4), // DEFAULT
            cursor.getLong(offset + 5), // OPERATE_TIME
            cursor.getInt(offset + 6) // UPLOAD
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Address entity, int offset) {
        entity.setADDRESS_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSERVER_ID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUSER_ID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setADDRESS_CONTENT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDEFAULT(cursor.getInt(offset + 4));
        entity.setOPERATE_TIME(cursor.getLong(offset + 5));
        entity.setUPLOAD(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Address entity, long rowId) {
        entity.setADDRESS_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Address entity) {
        if(entity != null) {
            return entity.getADDRESS_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Address entity) {
        return entity.getADDRESS_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
