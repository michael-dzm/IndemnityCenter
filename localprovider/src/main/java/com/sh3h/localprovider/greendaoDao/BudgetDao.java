package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Budget;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZ_BUDGET".
*/
public class BudgetDao extends AbstractDao<Budget, Long> {

    public static final String TABLENAME = "BZ_BUDGET";

    /**
     * Properties of entity Budget.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BUDGET_ID = new Property(0, Long.class, "BUDGET_ID", true, "BUDGET_ID");
        public final static Property PROJECT_ID = new Property(1, long.class, "PROJECT_ID", false, "PROJECT_ID");
        public final static Property BUDGET_NUMBER = new Property(2, String.class, "BUDGET_NUMBER", false, "BUDGET_NUMBER");
        public final static Property BUDGET_NAME = new Property(3, String.class, "BUDGET_NAME", false, "BUDGET_NAME");
        public final static Property BUDGET_STATE = new Property(4, int.class, "BUDGET_STATE", false, "BUDGET_STATE");
        public final static Property STATION_PILE_COUNT = new Property(5, int.class, "STATION_PILE_COUNT", false, "STATION_PILE_COUNT");
        public final static Property USER_COUNT = new Property(6, int.class, "USER_COUNT", false, "USER_COUNT");
    }


    public BudgetDao(DaoConfig config) {
        super(config);
    }
    
    public BudgetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BZ_BUDGET\" (" + //
                "\"BUDGET_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: BUDGET_ID
                "\"PROJECT_ID\" INTEGER NOT NULL ," + // 1: PROJECT_ID
                "\"BUDGET_NUMBER\" TEXT," + // 2: BUDGET_NUMBER
                "\"BUDGET_NAME\" TEXT," + // 3: BUDGET_NAME
                "\"BUDGET_STATE\" INTEGER NOT NULL ," + // 4: BUDGET_STATE
                "\"STATION_PILE_COUNT\" INTEGER NOT NULL ," + // 5: STATION_PILE_COUNT
                "\"USER_COUNT\" INTEGER NOT NULL );"); // 6: USER_COUNT
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BZ_BUDGET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Budget entity) {
        stmt.clearBindings();
 
        Long BUDGET_ID = entity.getBUDGET_ID();
        if (BUDGET_ID != null) {
            stmt.bindLong(1, BUDGET_ID);
        }
        stmt.bindLong(2, entity.getPROJECT_ID());
 
        String BUDGET_NUMBER = entity.getBUDGET_NUMBER();
        if (BUDGET_NUMBER != null) {
            stmt.bindString(3, BUDGET_NUMBER);
        }
 
        String BUDGET_NAME = entity.getBUDGET_NAME();
        if (BUDGET_NAME != null) {
            stmt.bindString(4, BUDGET_NAME);
        }
        stmt.bindLong(5, entity.getBUDGET_STATE());
        stmt.bindLong(6, entity.getSTATION_PILE_COUNT());
        stmt.bindLong(7, entity.getUSER_COUNT());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Budget entity) {
        stmt.clearBindings();
 
        Long BUDGET_ID = entity.getBUDGET_ID();
        if (BUDGET_ID != null) {
            stmt.bindLong(1, BUDGET_ID);
        }
        stmt.bindLong(2, entity.getPROJECT_ID());
 
        String BUDGET_NUMBER = entity.getBUDGET_NUMBER();
        if (BUDGET_NUMBER != null) {
            stmt.bindString(3, BUDGET_NUMBER);
        }
 
        String BUDGET_NAME = entity.getBUDGET_NAME();
        if (BUDGET_NAME != null) {
            stmt.bindString(4, BUDGET_NAME);
        }
        stmt.bindLong(5, entity.getBUDGET_STATE());
        stmt.bindLong(6, entity.getSTATION_PILE_COUNT());
        stmt.bindLong(7, entity.getUSER_COUNT());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Budget readEntity(Cursor cursor, int offset) {
        Budget entity = new Budget( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // BUDGET_ID
            cursor.getLong(offset + 1), // PROJECT_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BUDGET_NUMBER
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BUDGET_NAME
            cursor.getInt(offset + 4), // BUDGET_STATE
            cursor.getInt(offset + 5), // STATION_PILE_COUNT
            cursor.getInt(offset + 6) // USER_COUNT
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Budget entity, int offset) {
        entity.setBUDGET_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPROJECT_ID(cursor.getLong(offset + 1));
        entity.setBUDGET_NUMBER(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBUDGET_NAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBUDGET_STATE(cursor.getInt(offset + 4));
        entity.setSTATION_PILE_COUNT(cursor.getInt(offset + 5));
        entity.setUSER_COUNT(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Budget entity, long rowId) {
        entity.setBUDGET_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Budget entity) {
        if(entity != null) {
            return entity.getBUDGET_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Budget entity) {
        return entity.getBUDGET_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
