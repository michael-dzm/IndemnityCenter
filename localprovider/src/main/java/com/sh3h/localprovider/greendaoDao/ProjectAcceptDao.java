package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.ProjectAccept;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZ_PROJECT_ACCEPT".
*/
public class ProjectAcceptDao extends AbstractDao<ProjectAccept, Long> {

    public static final String TABLENAME = "BZ_PROJECT_ACCEPT";

    /**
     * Properties of entity ProjectAccept.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ACCEPT_ID = new Property(0, Long.class, "ACCEPT_ID", true, "ACCEPT_ID");
        public final static Property SERVER_ID = new Property(1, Long.class, "SERVER_ID", false, "SERVER_ID");
        public final static Property PROJECT_ID = new Property(2, long.class, "PROJECT_ID", false, "PROJECT_ID");
        public final static Property BUDGET_ID = new Property(3, long.class, "BUDGET_ID", false, "BUDGET_ID");
        public final static Property ACCEPT_RESULT = new Property(4, int.class, "ACCEPT_RESULT", false, "ACCEPT_RESULT");
        public final static Property OPERATOR = new Property(5, String.class, "OPERATOR", false, "OPERATOR");
        public final static Property OPERATE_TIME = new Property(6, long.class, "OPERATE_TIME", false, "OPERATE_TIME");
        public final static Property LONGITUDE = new Property(7, double.class, "LONGITUDE", false, "LONGITUDE");
        public final static Property LATITUDE = new Property(8, double.class, "LATITUDE", false, "LATITUDE");
        public final static Property REMARK = new Property(9, String.class, "REMARK", false, "REMARK");
        public final static Property UPLOAD = new Property(10, int.class, "UPLOAD", false, "UPLOAD");
    }


    public ProjectAcceptDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectAcceptDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BZ_PROJECT_ACCEPT\" (" + //
                "\"ACCEPT_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ACCEPT_ID
                "\"SERVER_ID\" INTEGER," + // 1: SERVER_ID
                "\"PROJECT_ID\" INTEGER NOT NULL ," + // 2: PROJECT_ID
                "\"BUDGET_ID\" INTEGER NOT NULL ," + // 3: BUDGET_ID
                "\"ACCEPT_RESULT\" INTEGER NOT NULL ," + // 4: ACCEPT_RESULT
                "\"OPERATOR\" TEXT," + // 5: OPERATOR
                "\"OPERATE_TIME\" INTEGER NOT NULL ," + // 6: OPERATE_TIME
                "\"LONGITUDE\" REAL NOT NULL ," + // 7: LONGITUDE
                "\"LATITUDE\" REAL NOT NULL ," + // 8: LATITUDE
                "\"REMARK\" TEXT," + // 9: REMARK
                "\"UPLOAD\" INTEGER NOT NULL );"); // 10: UPLOAD
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BZ_PROJECT_ACCEPT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectAccept entity) {
        stmt.clearBindings();
 
        Long ACCEPT_ID = entity.getACCEPT_ID();
        if (ACCEPT_ID != null) {
            stmt.bindLong(1, ACCEPT_ID);
        }
 
        Long SERVER_ID = entity.getSERVER_ID();
        if (SERVER_ID != null) {
            stmt.bindLong(2, SERVER_ID);
        }
        stmt.bindLong(3, entity.getPROJECT_ID());
        stmt.bindLong(4, entity.getBUDGET_ID());
        stmt.bindLong(5, entity.getACCEPT_RESULT());
 
        String OPERATOR = entity.getOPERATOR();
        if (OPERATOR != null) {
            stmt.bindString(6, OPERATOR);
        }
        stmt.bindLong(7, entity.getOPERATE_TIME());
        stmt.bindDouble(8, entity.getLONGITUDE());
        stmt.bindDouble(9, entity.getLATITUDE());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(10, REMARK);
        }
        stmt.bindLong(11, entity.getUPLOAD());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectAccept entity) {
        stmt.clearBindings();
 
        Long ACCEPT_ID = entity.getACCEPT_ID();
        if (ACCEPT_ID != null) {
            stmt.bindLong(1, ACCEPT_ID);
        }
 
        Long SERVER_ID = entity.getSERVER_ID();
        if (SERVER_ID != null) {
            stmt.bindLong(2, SERVER_ID);
        }
        stmt.bindLong(3, entity.getPROJECT_ID());
        stmt.bindLong(4, entity.getBUDGET_ID());
        stmt.bindLong(5, entity.getACCEPT_RESULT());
 
        String OPERATOR = entity.getOPERATOR();
        if (OPERATOR != null) {
            stmt.bindString(6, OPERATOR);
        }
        stmt.bindLong(7, entity.getOPERATE_TIME());
        stmt.bindDouble(8, entity.getLONGITUDE());
        stmt.bindDouble(9, entity.getLATITUDE());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(10, REMARK);
        }
        stmt.bindLong(11, entity.getUPLOAD());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProjectAccept readEntity(Cursor cursor, int offset) {
        ProjectAccept entity = new ProjectAccept( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ACCEPT_ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // SERVER_ID
            cursor.getLong(offset + 2), // PROJECT_ID
            cursor.getLong(offset + 3), // BUDGET_ID
            cursor.getInt(offset + 4), // ACCEPT_RESULT
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // OPERATOR
            cursor.getLong(offset + 6), // OPERATE_TIME
            cursor.getDouble(offset + 7), // LONGITUDE
            cursor.getDouble(offset + 8), // LATITUDE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // REMARK
            cursor.getInt(offset + 10) // UPLOAD
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectAccept entity, int offset) {
        entity.setACCEPT_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSERVER_ID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPROJECT_ID(cursor.getLong(offset + 2));
        entity.setBUDGET_ID(cursor.getLong(offset + 3));
        entity.setACCEPT_RESULT(cursor.getInt(offset + 4));
        entity.setOPERATOR(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOPERATE_TIME(cursor.getLong(offset + 6));
        entity.setLONGITUDE(cursor.getDouble(offset + 7));
        entity.setLATITUDE(cursor.getDouble(offset + 8));
        entity.setREMARK(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUPLOAD(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProjectAccept entity, long rowId) {
        entity.setACCEPT_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProjectAccept entity) {
        if(entity != null) {
            return entity.getACCEPT_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectAccept entity) {
        return entity.getACCEPT_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
