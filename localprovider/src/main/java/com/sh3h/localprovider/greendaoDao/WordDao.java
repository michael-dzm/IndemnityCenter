package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Word;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZ_WORD".
*/
public class WordDao extends AbstractDao<Word, Long> {

    public static final String TABLENAME = "BZ_WORD";

    /**
     * Properties of entity Word.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WORD_ID = new Property(0, Long.class, "WORD_ID", true, "WORD_ID");
        public final static Property PARENT_ID = new Property(1, Long.class, "PARENT_ID", false, "PARENT_ID");
        public final static Property GROUP = new Property(2, String.class, "GROUP", false, "GROUP");
        public final static Property NAME = new Property(3, String.class, "NAME", false, "NAME");
        public final static Property VALUE = new Property(4, String.class, "VALUE", false, "VALUE");
        public final static Property REMARK = new Property(5, String.class, "REMARK", false, "REMARK");
    }


    public WordDao(DaoConfig config) {
        super(config);
    }
    
    public WordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BZ_WORD\" (" + //
                "\"WORD_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: WORD_ID
                "\"PARENT_ID\" INTEGER," + // 1: PARENT_ID
                "\"GROUP\" TEXT," + // 2: GROUP
                "\"NAME\" TEXT," + // 3: NAME
                "\"VALUE\" TEXT," + // 4: VALUE
                "\"REMARK\" TEXT);"); // 5: REMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BZ_WORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long WORD_ID = entity.getWORD_ID();
        if (WORD_ID != null) {
            stmt.bindLong(1, WORD_ID);
        }
 
        Long PARENT_ID = entity.getPARENT_ID();
        if (PARENT_ID != null) {
            stmt.bindLong(2, PARENT_ID);
        }
 
        String GROUP = entity.getGROUP();
        if (GROUP != null) {
            stmt.bindString(3, GROUP);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(4, NAME);
        }
 
        String VALUE = entity.getVALUE();
        if (VALUE != null) {
            stmt.bindString(5, VALUE);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(6, REMARK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long WORD_ID = entity.getWORD_ID();
        if (WORD_ID != null) {
            stmt.bindLong(1, WORD_ID);
        }
 
        Long PARENT_ID = entity.getPARENT_ID();
        if (PARENT_ID != null) {
            stmt.bindLong(2, PARENT_ID);
        }
 
        String GROUP = entity.getGROUP();
        if (GROUP != null) {
            stmt.bindString(3, GROUP);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(4, NAME);
        }
 
        String VALUE = entity.getVALUE();
        if (VALUE != null) {
            stmt.bindString(5, VALUE);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(6, REMARK);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Word readEntity(Cursor cursor, int offset) {
        Word entity = new Word( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // WORD_ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // PARENT_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // GROUP
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NAME
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // VALUE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // REMARK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Word entity, int offset) {
        entity.setWORD_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPARENT_ID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGROUP(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVALUE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setREMARK(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Word entity, long rowId) {
        entity.setWORD_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Word entity) {
        if(entity != null) {
            return entity.getWORD_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Word entity) {
        return entity.getWORD_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
