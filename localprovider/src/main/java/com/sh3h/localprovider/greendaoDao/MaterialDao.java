package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Material;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZ_MATERIAL".
*/
public class MaterialDao extends AbstractDao<Material, Long> {

    public static final String TABLENAME = "BZ_MATERIAL";

    /**
     * Properties of entity Material.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MATERIAL_ID = new Property(0, Long.class, "MATERIAL_ID", true, "MATERIAL_ID");
        public final static Property MATERIAL_CATEGORY = new Property(1, String.class, "MATERIAL_CATEGORY", false, "MATERIAL_CATEGORY");
        public final static Property MATERIAL_NAME = new Property(2, String.class, "MATERIAL_NAME", false, "MATERIAL_NAME");
        public final static Property MATERIAL_FORMAT = new Property(3, String.class, "MATERIAL_FORMAT", false, "MATERIAL_FORMAT");
        public final static Property MATERIAL_UNIT = new Property(4, String.class, "MATERIAL_UNIT", false, "MATERIAL_UNIT");
        public final static Property MATERIAL_PRICE = new Property(5, float.class, "MATERIAL_PRICE", false, "MATERIAL_PRICE");
        public final static Property UPPER_LIMIT = new Property(6, float.class, "UPPER_LIMIT", false, "UPPER_LIMIT");
        public final static Property UPPER_LIMIT_TYPE = new Property(7, int.class, "UPPER_LIMIT_TYPE", false, "UPPER_LIMIT_TYPE");
        public final static Property MULTIPLE = new Property(8, float.class, "MULTIPLE", false, "MULTIPLE");
        public final static Property REMARK = new Property(9, String.class, "REMARK", false, "REMARK");
    }


    public MaterialDao(DaoConfig config) {
        super(config);
    }
    
    public MaterialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BZ_MATERIAL\" (" + //
                "\"MATERIAL_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: MATERIAL_ID
                "\"MATERIAL_CATEGORY\" TEXT," + // 1: MATERIAL_CATEGORY
                "\"MATERIAL_NAME\" TEXT," + // 2: MATERIAL_NAME
                "\"MATERIAL_FORMAT\" TEXT," + // 3: MATERIAL_FORMAT
                "\"MATERIAL_UNIT\" TEXT," + // 4: MATERIAL_UNIT
                "\"MATERIAL_PRICE\" REAL NOT NULL ," + // 5: MATERIAL_PRICE
                "\"UPPER_LIMIT\" REAL NOT NULL ," + // 6: UPPER_LIMIT
                "\"UPPER_LIMIT_TYPE\" INTEGER NOT NULL ," + // 7: UPPER_LIMIT_TYPE
                "\"MULTIPLE\" REAL NOT NULL ," + // 8: MULTIPLE
                "\"REMARK\" TEXT);"); // 9: REMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BZ_MATERIAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Material entity) {
        stmt.clearBindings();
 
        Long MATERIAL_ID = entity.getMATERIAL_ID();
        if (MATERIAL_ID != null) {
            stmt.bindLong(1, MATERIAL_ID);
        }
 
        String MATERIAL_CATEGORY = entity.getMATERIAL_CATEGORY();
        if (MATERIAL_CATEGORY != null) {
            stmt.bindString(2, MATERIAL_CATEGORY);
        }
 
        String MATERIAL_NAME = entity.getMATERIAL_NAME();
        if (MATERIAL_NAME != null) {
            stmt.bindString(3, MATERIAL_NAME);
        }
 
        String MATERIAL_FORMAT = entity.getMATERIAL_FORMAT();
        if (MATERIAL_FORMAT != null) {
            stmt.bindString(4, MATERIAL_FORMAT);
        }
 
        String MATERIAL_UNIT = entity.getMATERIAL_UNIT();
        if (MATERIAL_UNIT != null) {
            stmt.bindString(5, MATERIAL_UNIT);
        }
        stmt.bindDouble(6, entity.getMATERIAL_PRICE());
        stmt.bindDouble(7, entity.getUPPER_LIMIT());
        stmt.bindLong(8, entity.getUPPER_LIMIT_TYPE());
        stmt.bindDouble(9, entity.getMULTIPLE());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(10, REMARK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Material entity) {
        stmt.clearBindings();
 
        Long MATERIAL_ID = entity.getMATERIAL_ID();
        if (MATERIAL_ID != null) {
            stmt.bindLong(1, MATERIAL_ID);
        }
 
        String MATERIAL_CATEGORY = entity.getMATERIAL_CATEGORY();
        if (MATERIAL_CATEGORY != null) {
            stmt.bindString(2, MATERIAL_CATEGORY);
        }
 
        String MATERIAL_NAME = entity.getMATERIAL_NAME();
        if (MATERIAL_NAME != null) {
            stmt.bindString(3, MATERIAL_NAME);
        }
 
        String MATERIAL_FORMAT = entity.getMATERIAL_FORMAT();
        if (MATERIAL_FORMAT != null) {
            stmt.bindString(4, MATERIAL_FORMAT);
        }
 
        String MATERIAL_UNIT = entity.getMATERIAL_UNIT();
        if (MATERIAL_UNIT != null) {
            stmt.bindString(5, MATERIAL_UNIT);
        }
        stmt.bindDouble(6, entity.getMATERIAL_PRICE());
        stmt.bindDouble(7, entity.getUPPER_LIMIT());
        stmt.bindLong(8, entity.getUPPER_LIMIT_TYPE());
        stmt.bindDouble(9, entity.getMULTIPLE());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(10, REMARK);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Material readEntity(Cursor cursor, int offset) {
        Material entity = new Material( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // MATERIAL_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MATERIAL_CATEGORY
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MATERIAL_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MATERIAL_FORMAT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MATERIAL_UNIT
            cursor.getFloat(offset + 5), // MATERIAL_PRICE
            cursor.getFloat(offset + 6), // UPPER_LIMIT
            cursor.getInt(offset + 7), // UPPER_LIMIT_TYPE
            cursor.getFloat(offset + 8), // MULTIPLE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // REMARK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Material entity, int offset) {
        entity.setMATERIAL_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMATERIAL_CATEGORY(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMATERIAL_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMATERIAL_FORMAT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMATERIAL_UNIT(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMATERIAL_PRICE(cursor.getFloat(offset + 5));
        entity.setUPPER_LIMIT(cursor.getFloat(offset + 6));
        entity.setUPPER_LIMIT_TYPE(cursor.getInt(offset + 7));
        entity.setMULTIPLE(cursor.getFloat(offset + 8));
        entity.setREMARK(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Material entity, long rowId) {
        entity.setMATERIAL_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Material entity) {
        if(entity != null) {
            return entity.getMATERIAL_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Material entity) {
        return entity.getMATERIAL_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
