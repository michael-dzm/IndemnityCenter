package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.MaterialApply;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZ_MATERIAL_APPLY".
*/
public class MaterialApplyDao extends AbstractDao<MaterialApply, Long> {

    public static final String TABLENAME = "BZ_MATERIAL_APPLY";

    /**
     * Properties of entity MaterialApply.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property APPLY_ID = new Property(0, Long.class, "APPLY_ID", true, "APPLY_ID");
        public final static Property SERVER_ID = new Property(1, Long.class, "SERVER_ID", false, "SERVER_ID");
        public final static Property MATERIAL_ID = new Property(2, long.class, "MATERIAL_ID", false, "MATERIAL_ID");
        public final static Property APPLY_NUMBER = new Property(3, String.class, "APPLY_NUMBER", false, "APPLY_NUMBER");
        public final static Property APPLY_COUNT = new Property(4, float.class, "APPLY_COUNT", false, "APPLY_COUNT");
        public final static Property VERIFY_COUNT = new Property(5, float.class, "VERIFY_COUNT", false, "VERIFY_COUNT");
        public final static Property CONSTRUCTION_TEAM = new Property(6, String.class, "CONSTRUCTION_TEAM", false, "CONSTRUCTION_TEAM");
        public final static Property APPLY_DEPARTMENT = new Property(7, String.class, "APPLY_DEPARTMENT", false, "APPLY_DEPARTMENT");
        public final static Property APPLY_PERSION = new Property(8, String.class, "APPLY_PERSION", false, "APPLY_PERSION");
        public final static Property CONTACT_PHONE = new Property(9, String.class, "CONTACT_PHONE", false, "CONTACT_PHONE");
        public final static Property DELIVERY_ADDRESS = new Property(10, String.class, "DELIVERY_ADDRESS", false, "DELIVERY_ADDRESS");
        public final static Property OPERATOR = new Property(11, String.class, "OPERATOR", false, "OPERATOR");
        public final static Property OPERATE_TIME = new Property(12, long.class, "OPERATE_TIME", false, "OPERATE_TIME");
        public final static Property LONGITUDE = new Property(13, double.class, "LONGITUDE", false, "LONGITUDE");
        public final static Property LATITUDE = new Property(14, double.class, "LATITUDE", false, "LATITUDE");
        public final static Property REMARK = new Property(15, String.class, "REMARK", false, "REMARK");
        public final static Property UPLOAD = new Property(16, int.class, "UPLOAD", false, "UPLOAD");
    }


    public MaterialApplyDao(DaoConfig config) {
        super(config);
    }
    
    public MaterialApplyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BZ_MATERIAL_APPLY\" (" + //
                "\"APPLY_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: APPLY_ID
                "\"SERVER_ID\" INTEGER," + // 1: SERVER_ID
                "\"MATERIAL_ID\" INTEGER NOT NULL ," + // 2: MATERIAL_ID
                "\"APPLY_NUMBER\" TEXT," + // 3: APPLY_NUMBER
                "\"APPLY_COUNT\" REAL NOT NULL ," + // 4: APPLY_COUNT
                "\"VERIFY_COUNT\" REAL NOT NULL ," + // 5: VERIFY_COUNT
                "\"CONSTRUCTION_TEAM\" TEXT," + // 6: CONSTRUCTION_TEAM
                "\"APPLY_DEPARTMENT\" TEXT," + // 7: APPLY_DEPARTMENT
                "\"APPLY_PERSION\" TEXT," + // 8: APPLY_PERSION
                "\"CONTACT_PHONE\" TEXT," + // 9: CONTACT_PHONE
                "\"DELIVERY_ADDRESS\" TEXT," + // 10: DELIVERY_ADDRESS
                "\"OPERATOR\" TEXT," + // 11: OPERATOR
                "\"OPERATE_TIME\" INTEGER NOT NULL ," + // 12: OPERATE_TIME
                "\"LONGITUDE\" REAL NOT NULL ," + // 13: LONGITUDE
                "\"LATITUDE\" REAL NOT NULL ," + // 14: LATITUDE
                "\"REMARK\" TEXT," + // 15: REMARK
                "\"UPLOAD\" INTEGER NOT NULL );"); // 16: UPLOAD
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BZ_MATERIAL_APPLY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaterialApply entity) {
        stmt.clearBindings();
 
        Long APPLY_ID = entity.getAPPLY_ID();
        if (APPLY_ID != null) {
            stmt.bindLong(1, APPLY_ID);
        }
 
        Long SERVER_ID = entity.getSERVER_ID();
        if (SERVER_ID != null) {
            stmt.bindLong(2, SERVER_ID);
        }
        stmt.bindLong(3, entity.getMATERIAL_ID());
 
        String APPLY_NUMBER = entity.getAPPLY_NUMBER();
        if (APPLY_NUMBER != null) {
            stmt.bindString(4, APPLY_NUMBER);
        }
        stmt.bindDouble(5, entity.getAPPLY_COUNT());
        stmt.bindDouble(6, entity.getVERIFY_COUNT());
 
        String CONSTRUCTION_TEAM = entity.getCONSTRUCTION_TEAM();
        if (CONSTRUCTION_TEAM != null) {
            stmt.bindString(7, CONSTRUCTION_TEAM);
        }
 
        String APPLY_DEPARTMENT = entity.getAPPLY_DEPARTMENT();
        if (APPLY_DEPARTMENT != null) {
            stmt.bindString(8, APPLY_DEPARTMENT);
        }
 
        String APPLY_PERSION = entity.getAPPLY_PERSION();
        if (APPLY_PERSION != null) {
            stmt.bindString(9, APPLY_PERSION);
        }
 
        String CONTACT_PHONE = entity.getCONTACT_PHONE();
        if (CONTACT_PHONE != null) {
            stmt.bindString(10, CONTACT_PHONE);
        }
 
        String DELIVERY_ADDRESS = entity.getDELIVERY_ADDRESS();
        if (DELIVERY_ADDRESS != null) {
            stmt.bindString(11, DELIVERY_ADDRESS);
        }
 
        String OPERATOR = entity.getOPERATOR();
        if (OPERATOR != null) {
            stmt.bindString(12, OPERATOR);
        }
        stmt.bindLong(13, entity.getOPERATE_TIME());
        stmt.bindDouble(14, entity.getLONGITUDE());
        stmt.bindDouble(15, entity.getLATITUDE());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(16, REMARK);
        }
        stmt.bindLong(17, entity.getUPLOAD());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaterialApply entity) {
        stmt.clearBindings();
 
        Long APPLY_ID = entity.getAPPLY_ID();
        if (APPLY_ID != null) {
            stmt.bindLong(1, APPLY_ID);
        }
 
        Long SERVER_ID = entity.getSERVER_ID();
        if (SERVER_ID != null) {
            stmt.bindLong(2, SERVER_ID);
        }
        stmt.bindLong(3, entity.getMATERIAL_ID());
 
        String APPLY_NUMBER = entity.getAPPLY_NUMBER();
        if (APPLY_NUMBER != null) {
            stmt.bindString(4, APPLY_NUMBER);
        }
        stmt.bindDouble(5, entity.getAPPLY_COUNT());
        stmt.bindDouble(6, entity.getVERIFY_COUNT());
 
        String CONSTRUCTION_TEAM = entity.getCONSTRUCTION_TEAM();
        if (CONSTRUCTION_TEAM != null) {
            stmt.bindString(7, CONSTRUCTION_TEAM);
        }
 
        String APPLY_DEPARTMENT = entity.getAPPLY_DEPARTMENT();
        if (APPLY_DEPARTMENT != null) {
            stmt.bindString(8, APPLY_DEPARTMENT);
        }
 
        String APPLY_PERSION = entity.getAPPLY_PERSION();
        if (APPLY_PERSION != null) {
            stmt.bindString(9, APPLY_PERSION);
        }
 
        String CONTACT_PHONE = entity.getCONTACT_PHONE();
        if (CONTACT_PHONE != null) {
            stmt.bindString(10, CONTACT_PHONE);
        }
 
        String DELIVERY_ADDRESS = entity.getDELIVERY_ADDRESS();
        if (DELIVERY_ADDRESS != null) {
            stmt.bindString(11, DELIVERY_ADDRESS);
        }
 
        String OPERATOR = entity.getOPERATOR();
        if (OPERATOR != null) {
            stmt.bindString(12, OPERATOR);
        }
        stmt.bindLong(13, entity.getOPERATE_TIME());
        stmt.bindDouble(14, entity.getLONGITUDE());
        stmt.bindDouble(15, entity.getLATITUDE());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(16, REMARK);
        }
        stmt.bindLong(17, entity.getUPLOAD());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MaterialApply readEntity(Cursor cursor, int offset) {
        MaterialApply entity = new MaterialApply( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // APPLY_ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // SERVER_ID
            cursor.getLong(offset + 2), // MATERIAL_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // APPLY_NUMBER
            cursor.getFloat(offset + 4), // APPLY_COUNT
            cursor.getFloat(offset + 5), // VERIFY_COUNT
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CONSTRUCTION_TEAM
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // APPLY_DEPARTMENT
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // APPLY_PERSION
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CONTACT_PHONE
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // DELIVERY_ADDRESS
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // OPERATOR
            cursor.getLong(offset + 12), // OPERATE_TIME
            cursor.getDouble(offset + 13), // LONGITUDE
            cursor.getDouble(offset + 14), // LATITUDE
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // REMARK
            cursor.getInt(offset + 16) // UPLOAD
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaterialApply entity, int offset) {
        entity.setAPPLY_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSERVER_ID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMATERIAL_ID(cursor.getLong(offset + 2));
        entity.setAPPLY_NUMBER(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAPPLY_COUNT(cursor.getFloat(offset + 4));
        entity.setVERIFY_COUNT(cursor.getFloat(offset + 5));
        entity.setCONSTRUCTION_TEAM(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAPPLY_DEPARTMENT(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAPPLY_PERSION(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCONTACT_PHONE(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDELIVERY_ADDRESS(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOPERATOR(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOPERATE_TIME(cursor.getLong(offset + 12));
        entity.setLONGITUDE(cursor.getDouble(offset + 13));
        entity.setLATITUDE(cursor.getDouble(offset + 14));
        entity.setREMARK(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUPLOAD(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MaterialApply entity, long rowId) {
        entity.setAPPLY_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MaterialApply entity) {
        if(entity != null) {
            return entity.getAPPLY_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MaterialApply entity) {
        return entity.getAPPLY_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
