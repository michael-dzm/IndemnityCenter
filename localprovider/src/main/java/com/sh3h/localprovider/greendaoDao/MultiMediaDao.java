package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.MultiMedia;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZ_MULTIMEDIA".
*/
public class MultiMediaDao extends AbstractDao<MultiMedia, Long> {

    public static final String TABLENAME = "BZ_MULTIMEDIA";

    /**
     * Properties of entity MultiMedia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MULTIMEDIA_ID = new Property(0, Long.class, "MULTIMEDIA_ID", true, "MULTIMEDIA_ID");
        public final static Property SERVER_ID = new Property(1, Long.class, "SERVER_ID", false, "SERVER_ID");
        public final static Property RELATE_ID = new Property(2, long.class, "RELATE_ID", false, "RELATE_ID");
        public final static Property RELATE_TYPE = new Property(3, int.class, "RELATE_TYPE", false, "RELATE_TYPE");
        public final static Property FILE_TYPE = new Property(4, int.class, "FILE_TYPE", false, "FILE_TYPE");
        public final static Property FILE_NAME = new Property(5, String.class, "FILE_NAME", false, "FILE_NAME");
        public final static Property FILE_PATH = new Property(6, String.class, "FILE_PATH", false, "FILE_PATH");
        public final static Property FILE_HASH = new Property(7, String.class, "FILE_HASH", false, "FILE_HASH");
        public final static Property FILE_URL = new Property(8, String.class, "FILE_URL", false, "FILE_URL");
        public final static Property FILE_TIME = new Property(9, long.class, "FILE_TIME", false, "FILE_TIME");
        public final static Property UPLOAD = new Property(10, int.class, "UPLOAD", false, "UPLOAD");
    }


    public MultiMediaDao(DaoConfig config) {
        super(config);
    }
    
    public MultiMediaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BZ_MULTIMEDIA\" (" + //
                "\"MULTIMEDIA_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: MULTIMEDIA_ID
                "\"SERVER_ID\" INTEGER," + // 1: SERVER_ID
                "\"RELATE_ID\" INTEGER NOT NULL ," + // 2: RELATE_ID
                "\"RELATE_TYPE\" INTEGER NOT NULL ," + // 3: RELATE_TYPE
                "\"FILE_TYPE\" INTEGER NOT NULL ," + // 4: FILE_TYPE
                "\"FILE_NAME\" TEXT NOT NULL ," + // 5: FILE_NAME
                "\"FILE_PATH\" TEXT NOT NULL ," + // 6: FILE_PATH
                "\"FILE_HASH\" TEXT," + // 7: FILE_HASH
                "\"FILE_URL\" TEXT," + // 8: FILE_URL
                "\"FILE_TIME\" INTEGER NOT NULL ," + // 9: FILE_TIME
                "\"UPLOAD\" INTEGER NOT NULL );"); // 10: UPLOAD
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BZ_MULTIMEDIA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MultiMedia entity) {
        stmt.clearBindings();
 
        Long MULTIMEDIA_ID = entity.getMULTIMEDIA_ID();
        if (MULTIMEDIA_ID != null) {
            stmt.bindLong(1, MULTIMEDIA_ID);
        }
 
        Long SERVER_ID = entity.getSERVER_ID();
        if (SERVER_ID != null) {
            stmt.bindLong(2, SERVER_ID);
        }
        stmt.bindLong(3, entity.getRELATE_ID());
        stmt.bindLong(4, entity.getRELATE_TYPE());
        stmt.bindLong(5, entity.getFILE_TYPE());
        stmt.bindString(6, entity.getFILE_NAME());
        stmt.bindString(7, entity.getFILE_PATH());
 
        String FILE_HASH = entity.getFILE_HASH();
        if (FILE_HASH != null) {
            stmt.bindString(8, FILE_HASH);
        }
 
        String FILE_URL = entity.getFILE_URL();
        if (FILE_URL != null) {
            stmt.bindString(9, FILE_URL);
        }
        stmt.bindLong(10, entity.getFILE_TIME());
        stmt.bindLong(11, entity.getUPLOAD());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MultiMedia entity) {
        stmt.clearBindings();
 
        Long MULTIMEDIA_ID = entity.getMULTIMEDIA_ID();
        if (MULTIMEDIA_ID != null) {
            stmt.bindLong(1, MULTIMEDIA_ID);
        }
 
        Long SERVER_ID = entity.getSERVER_ID();
        if (SERVER_ID != null) {
            stmt.bindLong(2, SERVER_ID);
        }
        stmt.bindLong(3, entity.getRELATE_ID());
        stmt.bindLong(4, entity.getRELATE_TYPE());
        stmt.bindLong(5, entity.getFILE_TYPE());
        stmt.bindString(6, entity.getFILE_NAME());
        stmt.bindString(7, entity.getFILE_PATH());
 
        String FILE_HASH = entity.getFILE_HASH();
        if (FILE_HASH != null) {
            stmt.bindString(8, FILE_HASH);
        }
 
        String FILE_URL = entity.getFILE_URL();
        if (FILE_URL != null) {
            stmt.bindString(9, FILE_URL);
        }
        stmt.bindLong(10, entity.getFILE_TIME());
        stmt.bindLong(11, entity.getUPLOAD());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MultiMedia readEntity(Cursor cursor, int offset) {
        MultiMedia entity = new MultiMedia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // MULTIMEDIA_ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // SERVER_ID
            cursor.getLong(offset + 2), // RELATE_ID
            cursor.getInt(offset + 3), // RELATE_TYPE
            cursor.getInt(offset + 4), // FILE_TYPE
            cursor.getString(offset + 5), // FILE_NAME
            cursor.getString(offset + 6), // FILE_PATH
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FILE_HASH
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FILE_URL
            cursor.getLong(offset + 9), // FILE_TIME
            cursor.getInt(offset + 10) // UPLOAD
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MultiMedia entity, int offset) {
        entity.setMULTIMEDIA_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSERVER_ID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRELATE_ID(cursor.getLong(offset + 2));
        entity.setRELATE_TYPE(cursor.getInt(offset + 3));
        entity.setFILE_TYPE(cursor.getInt(offset + 4));
        entity.setFILE_NAME(cursor.getString(offset + 5));
        entity.setFILE_PATH(cursor.getString(offset + 6));
        entity.setFILE_HASH(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFILE_URL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFILE_TIME(cursor.getLong(offset + 9));
        entity.setUPLOAD(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MultiMedia entity, long rowId) {
        entity.setMULTIMEDIA_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MultiMedia entity) {
        if(entity != null) {
            return entity.getMULTIMEDIA_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MultiMedia entity) {
        return entity.getMULTIMEDIA_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
